### Spring
#### Spring框架概述
1. Spring是轻量级的开源的JavaEE框架
2. Spring可以解决企业应用开发的复杂性
3. Spring有两个核心部分：IOC和Aop
    1. IOC：控制反转，把创建对象过程交给Spring进行管理
    2. Aop：面向切面，不修改源代码进行功能增强
4. Spring特点
    1. 方便解耦，简化开发
    2. Aop编程支持
    3. 方便程序测试
    4. 方便和其他框架进行整合
    5. 方便进行事务操作
    6. 降低API开发难度

##### IOC(接口)
1. IOC思想基于IOC容器完成，IOC容器底层就是对象工厂
2. Spring提供IOC容器实现两种方式：（两个接口）
    1. BeanFactory：IOC容器基本实现，是Spring内部的使用接口，不提供开发人员进行使用
        * 加载配置文件的时候不会创建对象，在获取对象(使用)才去创建对象
    2. ApplicationContext：BeanFactory接口的子接口，提供更多更强大的功能，一般由开发人员进行使用
        * 加载配置文件的时候就会把在配置文件中的对象进行创建
3. ApplicationContext接口有实现类
    * FileSystemXmlApplicationContext（写文件在硬盘中的路径）
    * ClassPathXmlApplicationContext（写文件在项目中的路径/名称()在src中）

#### IOC操作Bean管理
1. **什么是Bean管理**
    * Bean管理指的是两个操作
        1. Spring创建对象
        2. Spring注入属性

2. Bean管理操作有两种方式
    1. 基于xml配置文件方式实现
        1. 在spring配置文件中，使用bean标签，标签里面添加对应属性就可以实现对象创建
        2. 在bean标签有很多属性，介绍常用的属性
            * id属性：唯一标识
            * class属性：类全路径（包类路径）
        3. 创建对象的时候，默认也是执行无参数构造方法完成对象创建
    2. 基于xml方式注入属性
        1. DI：依赖注入，就是注入属性
            * 第一种注入方式：使用set方法进行注入
                1. 配置对象创建
                2. set方法注入属性
                     * 使用property完成属性注入
                         * name：类里面属性名称
                         * value：向属性中注入的值
            * 第二种注入方式：使用有参数构造方法进行注入
                1. 创建类，定义属性，创建属性对应有参数构造方法
                2. 在spring配置文件中进行配置
                    1. 使用有参构造注入属性
                        * 使用标签<constructor-arg>进行配置

    3. IOC操作Bean管理（xml注入其他类型属性）
        1. 字面量
            1. null值
                * `<property name="address">
                    <null>
                    </property>`
            2. 属性值包含特殊符号
                1. 把<>进行转义&lt;&gt;
                2. 把特殊符号内容写到CDATA
                    * `<property name="address">
                        <value><![CDATA[<<南京>>]]>
                        </property>`
        2. 注入属性-外部bean
            1.  创建两个类service类和dao类
            2.  在service调用dao里面的方法
            3.  在spring配置文件中进行配置
                1.  创建UserDao类型属性，生成set方法
                2.  service和dao对象创建
                3.  注入userDao对象
                    * name属性：类里面属性名称
                    * ref属性：创建userDao对象bean标签id值

        3. 如何设置单实例还是多实例
            1. 在spring配置文件bean标签里面有属性(scope)用于设置单实例还是多实例
            2. scope属性值
                1. 第一个值，默认值，singleton，表示是单实例对象
                2. 第二个值，peototype，表示是多实例对象

            3. singleton和prototype区别
                1. 第一，singleton是单实例，prototype是多实例
                2. 第二，设置scope值是singleton的时候，加载spring配置文件的时候就会创建单实例对象，而当设置scope值是prototype的时候，不是在加载spring配置文件的时候创建对象，而是在调用getBean方法时创建多实例对象
        4. xml自动装配
            1. 什么是自动装配
                1. 根据指定装配规则（属性名称或者属性类型），Spring自动将匹配的属性值进行注入
            2. 实现自动装配
                * bean标签属性autowire，配置自动装配
                * autowire属性常用两个值：
                    * byName：根据属性名称注入，注入值bean的id值和类属性名称一样
                    * byType：根据属性类型注入
        5. 外部属性文件
            1. 直接配置数据库信息
                1. 配置德鲁伊连接池
                2. 引入德鲁伊连接池依赖jar包
            2. 引入外部属性文件配置数据库连接池
                1. 创建外部属性文件，properties格式文件，写数据库信息
                2. 把外部properties属性文件引入到spring配置文件中
                3. 在spring配置文件使用标签引入外部属性文件
    4. 基于注解方式实现
        1. 什么是注解
            1. 注解是代码特殊标记，格式：@注解名称(属性名称=属性值,属性名称=属性值..)
            2. 使用注解，注解作用在类上面，方法上面，属性上面
            3. 使用注解目的：简化xml配置
        2. Spring针对Bean管理中创建对象提供注解
            1. @Component
            2. @Service
            3. @Controller
            4. @Repository
            * 上面四个注解功能是一样的，都可以用来创建bean实例
        3. 基于注解方式实现对象创建
            1. 第一步：引入依赖
                * spring-aop-5.2.3.RELEASE.jar
            2. 第二步：开启组件扫描
                1. 如果扫描多个包，多个包使用逗号隔开
                2. 扫描包上层目录
            3. 创建类，在类上面添加创建对象注解
                1. 在注解里面value属性值可以省略不写
                2. 默认值就是类名称，首字母小写  UserService-->userService

    5. 基于注解方式实现属性注入
        1. @Autowired：根据属性类型进行自动装配
        2. @Qualifier：根据属性名称进行注入
        3. @Resource：可以根据类型注入，可以根据名称注入
        4. @Value：注入普通类型属性
#### AOP
1. 什么是AOP
    1. 面向切面编程(方面)，利用AOP可以对业务逻辑各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发效率
    2. 通俗描述：不通过修改源代码方式，在主干功能里面添加新功能
2. AOP底层原理
    1. AOP底层使用动态代理
        1. 有两种情况动态代理
            1. 第一种是有接口情况，使用JDK动态代理
                * 创建接口实现类代理对象，增强类方法
            2. 第二种是没有接口情况，使用CGLIB动态代理
                * 创建子类的代理对象，增强类的方法

3. AOP术语
    1. 连接点：类里面哪些方法可以被增强，这些方法称为连接点
    2. 切入点：实际被真正增强的方法，称为切入点
    3. 通知(增强)：实际增强的逻辑部分称为通知(增强)
        * 通知有多种类型
            * 前置通知
            * 后置通知
            * 环绕通知
            * 异常通知
            * 最终通知
    4. 切面：是动作，把通知应用到切入点的过程
4. AOP操作
    1. Spring框架一般都是基于AspectJ实现AOP操作
        1. 什么是AspectJ
            * AspectJ不是Spring组成部分，是一个独立AOP框架，一般把AspectJ和Spring框架一起使用，进行AOP操作
        2. 基于AspectJ实现AOP操作
            1. 基于xml配置文件实现
            2. 基于注解方式实现(使用)
        3. 进行通知的配置
            1. 在spring配置文件中，开启注解扫描
            2. 使用注解创建User和UserProxy对象
            3. 在增强类上面添加注解@Aspect
            4. 在spring配置文件中开启生成代理对象

#### JdbcTemplate
1. 什么是JdbcTemplate
    * Spring框架对JDBC进行封装，使用JdbcTemplate方便实现对数据库操作

#### 事务
1. 什么是事务
    1. 事务是数据库操作最基本单元，逻辑上的一组操作，要么都成功，如果有一个失败所有操作都失败
2. 事务的四个特性（ACID）
    1. 原子性
    2. 一致性
    3. 隔离性
    4. 持久性

3. 事务操作
    1. 事务添加到JavaEE三层结构里面的Service层(业务逻辑层)
    2. 在Spring中进行事务管理操作
        1. 有两种方式：编程式事务管理和**声明式事务管理**(使用)
    3. 声明式事务管理
        1. **基于注解方式**（使用）
        2. 基于xml配置文件方式
        * 在service类上面添加注解@Transactional，在这个注解里面可以配置事务相关参数
            * propagation：事务传播行为
                * 多事务方法直接进行调用，这个过程中事务是如何进行管理的
                * 事务方法：对数据表进行变化的操作
                * 事务的传播行为可以由传播属性指定，spring框架事务传播行为有7种
                    * REQUIRED：如果有事务在运行，当前的方法就在这个事务内运行，否则，就启动一个新的事务，并在自己的事务内运行
                    * REQUIRED_NEW：当前的方法必须启动新事务，并在它自己的事务内运行，如果有事务正在运行，应该将它挂起
                    * SUPPORTS：如果有事务在运行，当前的方法就在这个事务内运行，否则它可以不运行在事务中
                    * NOT_SUPPORTED：当前的方法不应该运行在事务中，如果有运行的事务，将它挂起
                    * MANDATORY：当前的方法必须运行在事务内部，如果没有正在运行的事务，就抛出异常
                    * NEVER：当前的方法不应该运行在事务中，如果有运行的事务，就抛出异常
                    * NESTED：如果有事务在运行，当前的方法就应该在这个事务的嵌套事务内运行，否则，就启动一个新的事务，并在它自己的事务内运行
            * ioslation：事务隔离级别
                1. 事务有特性成为隔离性，多事务操作之间不会产生影响。不考虑隔离性会产生很多问题
                2. 有三个问题：脏读、不可重复读、虚读(幻读)
                    * 脏读：一个未提交事务读取到另一个未提交事务的数据
                    * 不可重复读：一个未提交事务读取到另一提交事务修改数据 
                    * 虚读：一个未提交事务读取到另一提交事务添加数据
            * timeOut：超时时间
                * 事务需要在一定时间内进行提交，如果不提交进行回滚
                * 默认值是-1，设置时间以秒为单位进行计算
            * readOnly：是否只读
                * 读：查询操作，写：添加修改删除操作
                * readOnly默认值false，表示可以查询，可以添加修改删除操作
                * 设置readOnly值是true，设置成true之后，只能查询
            * rollbackFor：回滚
                * 设置出现哪些异常进行事务回滚
            * noRollbackFor：不回滚
                * 设置出现哪些异常不进行回滚

#### Spring5框架新功能
1. 整个Spring5框架的代码基于Java8，运行时兼容JDK9，许多不建议使用的类和方法在代码库中被删除
2. Spring5.0框架自带了通用的日志封装
    1. Spring5已经移除了Log4jConfigListener，官方建议使用Log4j2
    2. Spring5框架整合Log4j2
3. Spring5框架核心容器支持 **@Nullable** 注解
    * @Nullable注解可以使用在方法上面，属性上面，参数上面，表示方法返回可以为空，属性值可以为空，参数值可以为空
    * 注解用在方法上面，方法返回值可以为空
    * 注解使用早方法参数里面，方法参数可以为空
    * 注解使用在属性上面，属性值可以为空
4. Spring5核心容器支持函数式风格GenericApplicationContext
